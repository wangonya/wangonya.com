#+title: Difference between a python module and a package
#+author: Kelvin Wangonya
#+date: 2019-02-20T18:35:12+03:00
#+tags[]: python

*** Modules
    :PROPERTIES:
    :CUSTOM_ID: modules
    :END:
Modules are single Python files that can be imported. Any python file
can be a module. For example, if I have two Python files: =module.py=
and =hello.py= in the same directory:

#+begin_src python
  # module.py

  def hello(name):
      print("Hello {}".format(name))
#+end_src

I can =import= that module in my =hello.py=:

#+begin_src python
  #hello.py

  import module

  module.hello("World!") # Hello World!
#+end_src

The same can be done in the interpreter:

#+begin_src shell
  >>> from module import hello
  >>> hello("World!") # Hello World!
#+end_src

*** Packages
    :PROPERTIES:
    :CUSTOM_ID: packages
    :END:
Packages are made up of multiple Python files (or modules), and can even
include libraries written in different languages like C or C++. Seeing
an =__init.py__= file in a folder typically tells you that that folder
is a Python package. The =__init__.py= doesn't have to contain any code
-- sometimes it does -- it just has to be there for Python take that
particular folder as a package.

#+begin_src sh
  üìÅ my_package
      |- __init__.py
      |- module.py
#+end_src

#+begin_src python
  # __init.py__

  from my_package.module import hello
#+end_src

When you import =my_package= in your script, the =__init__.py= script
will be run, giving you access to all of the functions in the package.
In this case, it only gives access to the =module.hello= function.
