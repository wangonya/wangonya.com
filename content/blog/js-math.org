#+title: Javascript Arithmetic Cheat Sheet
#+author: Kelvin Wangonya
#+date: 2019-03-05T05:25:12+03:00
#+tags[]: javascript

Given that one of the main reason computers were invented was to solve
mathematical problems quickly, it is no wonder that all the modern
programming languages are so rich in arithmetic-oriented methods. The
earliest computers were basically just calculators. (/Yes, I'm looking
at you [[https://en.wikipedia.org/wiki/Abacus][Abacus]]/). If you dabble
in Javascript (and a little math every now and then), you might find
this useful. The very obvious operations like simple addition (+) and
subtraction (-) have been omitted. So have more advanced operations.

** Working with constants
   :PROPERTIES:
   :CUSTOM_ID: working-with-constants
   :END:
Logarithm to base /e/

#+begin_src javascript
  Math.E; // 2.718281828459045
#+end_src

Logarithm to base 10

#+begin_src javascript
  Math.LN10; // 2.302585092994046
#+end_src

Logarithm to base 2

#+begin_src javascript
  Math.LN2; // 0.6931471805599453
#+end_src

Base 10 logarithm of /e/

#+begin_src javascript
  Math.LOG10E; // 0.4342944819032518
#+end_src

Base 2 logarithm of /e/

#+begin_src javascript
  Math.LOG2E; // 1.4426950408889634
#+end_src

ðŸ¥§

#+begin_src javascript
  Math.PI; // 3.141592653589793
#+end_src

Square root of 1/2

#+begin_src javascript
  Math.SQRT1_2; // 0.7071067811865476
#+end_src

Square root of 2

#+begin_src javascript
  Math.SQRT2; // 1.4142135623730951
#+end_src

Infinity

#+begin_src javascript
  Infinity; // Infinity
#+end_src

** Rounding
   :PROPERTIES:
   :CUSTOM_ID: rounding
   :END:
=Math.round= returns the value of a number rounded to the nearest
integer.

#+begin_src javascript
  Math.round(4.2); // 4
  Math.round(4.7); // 5
  Math.round(4.5); // 5. Half-way values are always rounded up
#+end_src

Speaking of rounding up, =Math.ceil()=:

#+begin_src javascript
  Math.ceil(4.2); // 5
  Math.ceil(4.7); // 5
  Math.ceil(-4.7); // -4. Ceiling a negative number will round towards zero
#+end_src

=Math.floor()= rounds down:

#+begin_src javascript
  Math.floor(4.2); // 4
  Math.floor(4.7); // 4
  Math.floor(-4.7); // -5. Flooring a negative number will round away from zero
#+end_src

** Modulus (%)
   :PROPERTIES:
   :CUSTOM_ID: modulus
   :END:
Returns the remainder after (integer) division.

#+begin_src javascript
  42 % 10; // 2
  -40 % 10; // -0 ðŸ¤”
#+end_src

** Trigonometry
   :PROPERTIES:
   :CUSTOM_ID: trigonometry
   :END:
Sine

#+begin_src javascript
  Math.sin(60); // -0.3048106211022167
#+end_src

Cosine

#+begin_src javascript
  Math.cos(60); // -0.9524129804151563
#+end_src

Tangent

#+begin_src javascript
  Math.tan(60); // 0.320040389379563
#+end_src

** Incrementing (++)
   :PROPERTIES:
   :CUSTOM_ID: incrementing
   :END:
=++= increments its operand by 1.

#+begin_src javascript
  // postfix: returns the value before incrementing
  let a = 4, // 4
    b = a++, // 4
    c = a; //5
#+end_src

#+begin_src javascript
  // prefix: returns the value after incrementing
  let a = 4, // 4
    b = ++a, // 5
    c = a; //5
#+end_src

** Decrementing (--)
   :PROPERTIES:
   :CUSTOM_ID: decrementing
   :END:
=--= decrements its operand by 1.

#+begin_src javascript
  // postfix: returns the value before decrementing
  let a = 4, // 4
    b = a--, // 4
    c = a; //3
#+end_src

#+begin_src javascript
  // prefix: returns the value after decrementing
  let a = 4, // 4
    b = -a, // 3
    c = a; //3
#+end_src

** Exponentiation (**)
   :PROPERTIES:
   :CUSTOM_ID: exponentiation
   :END:
#+begin_src javascript
  // Math.pow() or ** can be used
  let a = 4,
    b = 2,
    c = Math.pow(a, b), // 16
    d = a ** b; // 16
#+end_src

** Getting maximum and minimum
   :PROPERTIES:
   :CUSTOM_ID: getting-maximum-and-minimum
   :END:
#+begin_src javascript
  Math.max(4.2, 4.7); // 4.7
  Math.min(4.2, 4.7); // 4.2
#+end_src

Getting maximum and minimum from an array:

#+begin_src javascript
  const arr = [1, 2, 3, 4, 5, 6, 7, 8, 9],
    max = Math.max(...arr), // 9
    min = Math.min(...arr); // 1
#+end_src

** Getting roots âˆš
   :PROPERTIES:
   :CUSTOM_ID: getting-roots
   :END:
Square Root

#+begin_src javascript
  Math.sqrt(16); // 4
#+end_src

Cube Root

#+begin_src javascript
  Math.cbrt(27); // 3
#+end_src

To find the nth-root, use the Math.pow() function and pass in a
fractional exponent.

#+begin_src javascript
  // This finds the 6th root of 64
  Math.pow(64, 1 / 6); // 4
#+end_src

Much more complex calculations can be done by combining one or more of
these operations.
